//Reverse a Number

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;

contract reverse
{
    function _reverse(uint n) public pure returns(uint)
    {
        uint rem;
        uint rev=0;

        while(n>0)
        {
            rem = n%10;
            rev = (rev *10) + rem;
            n = n/10;
        }
        return rev;
    }
}


//Reverse Array

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;

function reverseArray(uint[] memory arr , uint length) public pure returns(uint[] memory)
{
    uint[] memory revArr=new uint[](length);
    uint j;
    for(uint i=length;i>0; i--)
    {
        revArr[j]=arr[i-1];
        j++;
    }
    return(revArr);
}

// 2nd method
function reverse1Array(uint256[] memory arr, uint256 len)
    public pure returns (uint256[] memory)
    {
        uint256 temp;
        for (uint256 i = 0; i < len / 2; i++) {
            temp = arr[i];
            arr[i] = arr[len - i - 1];
            arr[len - i - 1] = temp;
        }
        return arr;
    }

//Arrray to Even

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;
function even(uint[] memory arr) public view returns(uint[] memory)
    {
        for (uint i = 0 ; i<arr.length; i++)
        {
            arr[i] = arr[i]*2;
        
        }
        return arr;
    }
    
    
//Sorting in Ascending Order
    
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;
function sort(uint[] memory arr) public pure returns(uint[] memory)
    {
        uint temp;
        for(uint i=0; i< arr.length-1; ++i)
        {
            for(uint j = 0; j < arr.length-1 ; ++j) 
            {
                if(arr[j]>arr[j+1])
                {
                    temp = arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1] = temp;
                }   
            }             
        }
        return arr;
    }
